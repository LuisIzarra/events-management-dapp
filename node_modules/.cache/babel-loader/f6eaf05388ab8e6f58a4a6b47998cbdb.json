{"ast":null,"code":"var _jsxFileName = \"/Users/luisrodriguez/events-management-dapp/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport Events from \"./artifacts/contracts/Events.sol/Events.json\"; // import Token from \"./artifacts/contracts/Token.sol/Token.json\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst eventAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\"; // const tokenAddress = \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\";\n\nfunction App() {\n  _s();\n\n  const [eventName, setEventName] = useState();\n  const [eventId, setEventId] = useState(); // const [userAccount, setUserAccount] = useState();\n  // const [amount, setAmount] = useState();\n\n  async function requestAccount() {\n    await window.ethereum.request({\n      method: \"eth_requestAccounts\"\n    });\n  }\n\n  async function findEventById() {\n    if (typeof window.ethereum !== \"undefined\") {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      console.log({\n        provider\n      });\n      const contract = new ethers.Contract(eventAddress, Events.abi, provider);\n\n      try {\n        const data = await contract.greet();\n        console.log(\"data: \", data);\n      } catch (err) {\n        console.log(\"Error: \", err);\n      }\n    }\n  } // async function getBalance() {\n  //   if (typeof window.ethereum !== \"undefined\") {\n  //     const [account] = await window.ethereum.request({\n  //       method: \"eth_requestAccounts\",\n  //     });\n  //     const provider = new ethers.providers.Web3Provider(window.ethereum);\n  //     const contract = new ethers.Contract(tokenAddress, Token.abi, provider);\n  //     const balance = await contract.balanceOf(account);\n  //     console.log(\"Balance: \", balance.toString());\n  //   }\n  // }\n\n\n  async function createEvent() {\n    if (!eventName, !eventId) return;\n\n    if (typeof window.ethereum !== \"undefined\") {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      console.log({\n        provider\n      });\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(eventAddress, Events.abi, signer);\n      const transaction = await contract.createEvent(eventName, eventId);\n      await transaction.wait();\n      findEventById();\n    }\n  } // async function sendCoins() {\n  //   if (typeof window.ethereum !== \"undefined\") {\n  //     await requestAccount();\n  //     const provider = new ethers.providers.Web3Provider(window.ethereum);\n  //     const signer = provider.getSigner();\n  //     const contract = new ethers.Contract(tokenAddress, Token.abi, signer);\n  //     const transaction = await contract.transfer(userAccount, amount);\n  //     await transaction.wait();\n  //     console.log(`${amount} Coins successfully sent to ${userAccount}`);\n  //   }\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createEvent,\n        children: \"Create Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setEventId(e.target.value),\n        placeholder: \"Set event ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setEventName(e.target.value),\n        placeholder: \"Set event's name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: findEventById,\n        children: \"Find Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Event ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"E3QGC6czxlTrFTcCW84zV81FwpQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/luisrodriguez/events-management-dapp/src/App.js"],"names":["useState","ethers","Events","eventAddress","App","eventName","setEventName","eventId","setEventId","requestAccount","window","ethereum","request","method","findEventById","provider","providers","Web3Provider","console","log","contract","Contract","abi","data","greet","err","createEvent","signer","getSigner","transaction","wait","e","target","value"],"mappings":"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","sourcesContent":["import \"./App.css\";\nimport { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport Events from \"./artifacts/contracts/Events.sol/Events.json\";\n// import Token from \"./artifacts/contracts/Token.sol/Token.json\";\n\nconst eventAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\n// const tokenAddress = \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\";\n\nfunction App() {\n  const [eventName, setEventName] = useState();\n  const [eventId, setEventId] = useState();\n  // const [userAccount, setUserAccount] = useState();\n  // const [amount, setAmount] = useState();\n\n  async function requestAccount() {\n    await window.ethereum.request({ method: \"eth_requestAccounts\" });\n  }\n\n  async function findEventById() {\n    if (typeof window.ethereum !== \"undefined\") {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      console.log({ provider });\n      const contract = new ethers.Contract(eventAddress, Events.abi, provider);\n      try {\n        const data = await contract.greet();\n        console.log(\"data: \", data);\n      } catch (err) {\n        console.log(\"Error: \", err);\n      }\n    }\n  }\n\n  // async function getBalance() {\n  //   if (typeof window.ethereum !== \"undefined\") {\n  //     const [account] = await window.ethereum.request({\n  //       method: \"eth_requestAccounts\",\n  //     });\n  //     const provider = new ethers.providers.Web3Provider(window.ethereum);\n  //     const contract = new ethers.Contract(tokenAddress, Token.abi, provider);\n  //     const balance = await contract.balanceOf(account);\n  //     console.log(\"Balance: \", balance.toString());\n  //   }\n  // }\n\n  async function createEvent() {\n    if ((!eventName, !eventId)) return;\n    if (typeof window.ethereum !== \"undefined\") {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      console.log({ provider });\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(eventAddress, Events.abi, signer);\n      const transaction = await contract.createEvent(eventName, eventId);\n      await transaction.wait();\n      findEventById();\n    }\n  }\n\n  // async function sendCoins() {\n  //   if (typeof window.ethereum !== \"undefined\") {\n  //     await requestAccount();\n  //     const provider = new ethers.providers.Web3Provider(window.ethereum);\n  //     const signer = provider.getSigner();\n  //     const contract = new ethers.Contract(tokenAddress, Token.abi, signer);\n  //     const transaction = await contract.transfer(userAccount, amount);\n  //     await transaction.wait();\n  //     console.log(`${amount} Coins successfully sent to ${userAccount}`);\n  //   }\n  // }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <br />\n        <button onClick={createEvent}>Create Event</button>\n        <input\n          onChange={(e) => setEventId(e.target.value)}\n          placeholder=\"Set event ID\"\n        />\n        <input\n          onChange={(e) => setEventName(e.target.value)}\n          placeholder=\"Set event's name\"\n        />\n        <br />\n        <button onClick={findEventById}>Find Event</button>\n        <input placeholder=\"Event ID\" />\n        {/* <button onClick={getBalance}>Get Balance</button>\n        <button onClick={sendCoins}>Send Coins</button>\n        <input\n          onChange={(e) => setUserAccount(e.target.value)}\n          placeholder=\"Account ID\"\n        />\n        <input\n          onChange={(e) => setAmount(e.target.value)}\n          placeholder=\"Amount\"\n        /> */}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}